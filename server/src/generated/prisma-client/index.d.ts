// Code generated by Prisma (prisma@1.33.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  application: (where?: ApplicationWhereInput) => Promise<boolean>;
  competition: (where?: CompetitionWhereInput) => Promise<boolean>;
  cost: (where?: CostWhereInput) => Promise<boolean>;
  details: (where?: DetailsWhereInput) => Promise<boolean>;
  finances: (where?: FinancesWhereInput) => Promise<boolean>;
  link: (where?: LinkWhereInput) => Promise<boolean>;
  location: (where?: LocationWhereInput) => Promise<boolean>;
  organisation: (where?: OrganisationWhereInput) => Promise<boolean>;
  question: (where?: QuestionWhereInput) => Promise<boolean>;
  team: (where?: TeamWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  vote: (where?: VoteWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  application: (
    where: ApplicationWhereUniqueInput
  ) => ApplicationNullablePromise;
  applications: (args?: {
    where?: ApplicationWhereInput;
    orderBy?: ApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Application>;
  applicationsConnection: (args?: {
    where?: ApplicationWhereInput;
    orderBy?: ApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ApplicationConnectionPromise;
  competition: (
    where: CompetitionWhereUniqueInput
  ) => CompetitionNullablePromise;
  competitions: (args?: {
    where?: CompetitionWhereInput;
    orderBy?: CompetitionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Competition>;
  competitionsConnection: (args?: {
    where?: CompetitionWhereInput;
    orderBy?: CompetitionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CompetitionConnectionPromise;
  cost: (where: CostWhereUniqueInput) => CostNullablePromise;
  costs: (args?: {
    where?: CostWhereInput;
    orderBy?: CostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Cost>;
  costsConnection: (args?: {
    where?: CostWhereInput;
    orderBy?: CostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CostConnectionPromise;
  details: (where: DetailsWhereUniqueInput) => DetailsNullablePromise;
  detailses: (args?: {
    where?: DetailsWhereInput;
    orderBy?: DetailsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Details>;
  detailsesConnection: (args?: {
    where?: DetailsWhereInput;
    orderBy?: DetailsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DetailsConnectionPromise;
  finances: (where: FinancesWhereUniqueInput) => FinancesNullablePromise;
  financeses: (args?: {
    where?: FinancesWhereInput;
    orderBy?: FinancesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Finances>;
  financesesConnection: (args?: {
    where?: FinancesWhereInput;
    orderBy?: FinancesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FinancesConnectionPromise;
  link: (where: LinkWhereUniqueInput) => LinkNullablePromise;
  links: (args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Link>;
  linksConnection: (args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LinkConnectionPromise;
  location: (where: LocationWhereUniqueInput) => LocationNullablePromise;
  locations: (args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Location>;
  locationsConnection: (args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LocationConnectionPromise;
  organisation: (
    where: OrganisationWhereUniqueInput
  ) => OrganisationNullablePromise;
  organisations: (args?: {
    where?: OrganisationWhereInput;
    orderBy?: OrganisationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Organisation>;
  organisationsConnection: (args?: {
    where?: OrganisationWhereInput;
    orderBy?: OrganisationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrganisationConnectionPromise;
  question: (where: QuestionWhereUniqueInput) => QuestionNullablePromise;
  questions: (args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Question>;
  questionsConnection: (args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => QuestionConnectionPromise;
  team: (where: TeamWhereUniqueInput) => TeamNullablePromise;
  teams: (args?: {
    where?: TeamWhereInput;
    orderBy?: TeamOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Team>;
  teamsConnection: (args?: {
    where?: TeamWhereInput;
    orderBy?: TeamOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TeamConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  vote: (where: VoteWhereUniqueInput) => VoteNullablePromise;
  votes: (args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Vote>;
  votesConnection: (args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => VoteConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createApplication: (data: ApplicationCreateInput) => ApplicationPromise;
  updateApplication: (args: {
    data: ApplicationUpdateInput;
    where: ApplicationWhereUniqueInput;
  }) => ApplicationPromise;
  upsertApplication: (args: {
    where: ApplicationWhereUniqueInput;
    create: ApplicationCreateInput;
    update: ApplicationUpdateInput;
  }) => ApplicationPromise;
  deleteApplication: (where: ApplicationWhereUniqueInput) => ApplicationPromise;
  deleteManyApplications: (
    where?: ApplicationWhereInput
  ) => BatchPayloadPromise;
  createCompetition: (data: CompetitionCreateInput) => CompetitionPromise;
  updateCompetition: (args: {
    data: CompetitionUpdateInput;
    where: CompetitionWhereUniqueInput;
  }) => CompetitionPromise;
  updateManyCompetitions: (args: {
    data: CompetitionUpdateManyMutationInput;
    where?: CompetitionWhereInput;
  }) => BatchPayloadPromise;
  upsertCompetition: (args: {
    where: CompetitionWhereUniqueInput;
    create: CompetitionCreateInput;
    update: CompetitionUpdateInput;
  }) => CompetitionPromise;
  deleteCompetition: (where: CompetitionWhereUniqueInput) => CompetitionPromise;
  deleteManyCompetitions: (
    where?: CompetitionWhereInput
  ) => BatchPayloadPromise;
  createCost: (data: CostCreateInput) => CostPromise;
  updateCost: (args: {
    data: CostUpdateInput;
    where: CostWhereUniqueInput;
  }) => CostPromise;
  updateManyCosts: (args: {
    data: CostUpdateManyMutationInput;
    where?: CostWhereInput;
  }) => BatchPayloadPromise;
  upsertCost: (args: {
    where: CostWhereUniqueInput;
    create: CostCreateInput;
    update: CostUpdateInput;
  }) => CostPromise;
  deleteCost: (where: CostWhereUniqueInput) => CostPromise;
  deleteManyCosts: (where?: CostWhereInput) => BatchPayloadPromise;
  createDetails: (data: DetailsCreateInput) => DetailsPromise;
  updateDetails: (args: {
    data: DetailsUpdateInput;
    where: DetailsWhereUniqueInput;
  }) => DetailsPromise;
  updateManyDetailses: (args: {
    data: DetailsUpdateManyMutationInput;
    where?: DetailsWhereInput;
  }) => BatchPayloadPromise;
  upsertDetails: (args: {
    where: DetailsWhereUniqueInput;
    create: DetailsCreateInput;
    update: DetailsUpdateInput;
  }) => DetailsPromise;
  deleteDetails: (where: DetailsWhereUniqueInput) => DetailsPromise;
  deleteManyDetailses: (where?: DetailsWhereInput) => BatchPayloadPromise;
  createFinances: (data: FinancesCreateInput) => FinancesPromise;
  updateFinances: (args: {
    data: FinancesUpdateInput;
    where: FinancesWhereUniqueInput;
  }) => FinancesPromise;
  upsertFinances: (args: {
    where: FinancesWhereUniqueInput;
    create: FinancesCreateInput;
    update: FinancesUpdateInput;
  }) => FinancesPromise;
  deleteFinances: (where: FinancesWhereUniqueInput) => FinancesPromise;
  deleteManyFinanceses: (where?: FinancesWhereInput) => BatchPayloadPromise;
  createLink: (data: LinkCreateInput) => LinkPromise;
  updateLink: (args: {
    data: LinkUpdateInput;
    where: LinkWhereUniqueInput;
  }) => LinkPromise;
  updateManyLinks: (args: {
    data: LinkUpdateManyMutationInput;
    where?: LinkWhereInput;
  }) => BatchPayloadPromise;
  upsertLink: (args: {
    where: LinkWhereUniqueInput;
    create: LinkCreateInput;
    update: LinkUpdateInput;
  }) => LinkPromise;
  deleteLink: (where: LinkWhereUniqueInput) => LinkPromise;
  deleteManyLinks: (where?: LinkWhereInput) => BatchPayloadPromise;
  createLocation: (data: LocationCreateInput) => LocationPromise;
  updateLocation: (args: {
    data: LocationUpdateInput;
    where: LocationWhereUniqueInput;
  }) => LocationPromise;
  updateManyLocations: (args: {
    data: LocationUpdateManyMutationInput;
    where?: LocationWhereInput;
  }) => BatchPayloadPromise;
  upsertLocation: (args: {
    where: LocationWhereUniqueInput;
    create: LocationCreateInput;
    update: LocationUpdateInput;
  }) => LocationPromise;
  deleteLocation: (where: LocationWhereUniqueInput) => LocationPromise;
  deleteManyLocations: (where?: LocationWhereInput) => BatchPayloadPromise;
  createOrganisation: (data: OrganisationCreateInput) => OrganisationPromise;
  updateOrganisation: (args: {
    data: OrganisationUpdateInput;
    where: OrganisationWhereUniqueInput;
  }) => OrganisationPromise;
  updateManyOrganisations: (args: {
    data: OrganisationUpdateManyMutationInput;
    where?: OrganisationWhereInput;
  }) => BatchPayloadPromise;
  upsertOrganisation: (args: {
    where: OrganisationWhereUniqueInput;
    create: OrganisationCreateInput;
    update: OrganisationUpdateInput;
  }) => OrganisationPromise;
  deleteOrganisation: (
    where: OrganisationWhereUniqueInput
  ) => OrganisationPromise;
  deleteManyOrganisations: (
    where?: OrganisationWhereInput
  ) => BatchPayloadPromise;
  createQuestion: (data: QuestionCreateInput) => QuestionPromise;
  updateQuestion: (args: {
    data: QuestionUpdateInput;
    where: QuestionWhereUniqueInput;
  }) => QuestionPromise;
  updateManyQuestions: (args: {
    data: QuestionUpdateManyMutationInput;
    where?: QuestionWhereInput;
  }) => BatchPayloadPromise;
  upsertQuestion: (args: {
    where: QuestionWhereUniqueInput;
    create: QuestionCreateInput;
    update: QuestionUpdateInput;
  }) => QuestionPromise;
  deleteQuestion: (where: QuestionWhereUniqueInput) => QuestionPromise;
  deleteManyQuestions: (where?: QuestionWhereInput) => BatchPayloadPromise;
  createTeam: (data: TeamCreateInput) => TeamPromise;
  updateTeam: (args: {
    data: TeamUpdateInput;
    where: TeamWhereUniqueInput;
  }) => TeamPromise;
  upsertTeam: (args: {
    where: TeamWhereUniqueInput;
    create: TeamCreateInput;
    update: TeamUpdateInput;
  }) => TeamPromise;
  deleteTeam: (where: TeamWhereUniqueInput) => TeamPromise;
  deleteManyTeams: (where?: TeamWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createVote: (data: VoteCreateInput) => VotePromise;
  updateVote: (args: {
    data: VoteUpdateInput;
    where: VoteWhereUniqueInput;
  }) => VotePromise;
  upsertVote: (args: {
    where: VoteWhereUniqueInput;
    create: VoteCreateInput;
    update: VoteUpdateInput;
  }) => VotePromise;
  deleteVote: (where: VoteWhereUniqueInput) => VotePromise;
  deleteManyVotes: (where?: VoteWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  application: (
    where?: ApplicationSubscriptionWhereInput
  ) => ApplicationSubscriptionPayloadSubscription;
  competition: (
    where?: CompetitionSubscriptionWhereInput
  ) => CompetitionSubscriptionPayloadSubscription;
  cost: (
    where?: CostSubscriptionWhereInput
  ) => CostSubscriptionPayloadSubscription;
  details: (
    where?: DetailsSubscriptionWhereInput
  ) => DetailsSubscriptionPayloadSubscription;
  finances: (
    where?: FinancesSubscriptionWhereInput
  ) => FinancesSubscriptionPayloadSubscription;
  link: (
    where?: LinkSubscriptionWhereInput
  ) => LinkSubscriptionPayloadSubscription;
  location: (
    where?: LocationSubscriptionWhereInput
  ) => LocationSubscriptionPayloadSubscription;
  organisation: (
    where?: OrganisationSubscriptionWhereInput
  ) => OrganisationSubscriptionPayloadSubscription;
  question: (
    where?: QuestionSubscriptionWhereInput
  ) => QuestionSubscriptionPayloadSubscription;
  team: (
    where?: TeamSubscriptionWhereInput
  ) => TeamSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  vote: (
    where?: VoteSubscriptionWhereInput
  ) => VoteSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type DetailsOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "estimate_ASC"
  | "estimate_DESC"
  | "duration_ASC"
  | "duration_DESC"
  | "resubmission_ASC"
  | "resubmission_DESC";

export type LinkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "description_ASC"
  | "description_DESC"
  | "url_ASC"
  | "url_DESC";

export type CostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "labour_ASC"
  | "labour_DESC"
  | "overhead_ASC"
  | "overhead_DESC"
  | "meterial_ASC"
  | "meterial_DESC"
  | "capital_ASC"
  | "capital_DESC"
  | "subcontracting_ASC"
  | "subcontracting_DESC"
  | "travel_ASC"
  | "travel_DESC"
  | "other_ASC"
  | "other_DESC"
  | "total_ASC"
  | "total_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC";

export type VoteOrderByInput = "id_ASC" | "id_DESC";

export type OrganisationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "type_ASC"
  | "type_DESC";

export type ApplicationOrderByInput = "id_ASC" | "id_DESC";

export type CompetitionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "description_ASC"
  | "description_DESC"
  | "title_ASC"
  | "title_DESC"
  | "fundingType_ASC"
  | "fundingType_DESC"
  | "projectSize_ASC"
  | "projectSize_DESC"
  | "openTime_ASC"
  | "openTime_DESC"
  | "closeTime_ASC"
  | "closeTime_DESC";

export type TeamOrderByInput = "id_ASC" | "id_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type FinancesOrderByInput = "id_ASC" | "id_DESC";

export type QuestionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "display_ASC"
  | "display_DESC"
  | "answer_ASC"
  | "answer_DESC"
  | "complete_ASC"
  | "complete_DESC";

export type LocationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "postcode_ASC"
  | "postcode_DESC";

export interface OrganisationCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  type: String;
}

export type ApplicationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type VoteWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface VoteUpdateWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateWithoutUserDataInput;
}

export interface UserUpdateOneWithoutLinksInput {
  create?: Maybe<UserCreateWithoutLinksInput>;
  update?: Maybe<UserUpdateWithoutLinksDataInput>;
  upsert?: Maybe<UserUpsertWithoutLinksInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface QuestionUpdateManyDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  display?: Maybe<Boolean>;
  answer?: Maybe<String>;
  complete?: Maybe<Boolean>;
}

export interface LinkUpdateWithoutVotesDataInput {
  description?: Maybe<String>;
  url?: Maybe<String>;
  postedBy?: Maybe<UserUpdateOneWithoutLinksInput>;
}

export interface LinkWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  postedBy?: Maybe<UserWhereInput>;
  votes_every?: Maybe<VoteWhereInput>;
  votes_some?: Maybe<VoteWhereInput>;
  votes_none?: Maybe<VoteWhereInput>;
  AND?: Maybe<LinkWhereInput[] | LinkWhereInput>;
  OR?: Maybe<LinkWhereInput[] | LinkWhereInput>;
  NOT?: Maybe<LinkWhereInput[] | LinkWhereInput>;
}

export interface LinkUpdateOneRequiredWithoutVotesInput {
  create?: Maybe<LinkCreateWithoutVotesInput>;
  update?: Maybe<LinkUpdateWithoutVotesDataInput>;
  upsert?: Maybe<LinkUpsertWithoutVotesInput>;
  connect?: Maybe<LinkWhereUniqueInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface OrganisationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  AND?: Maybe<OrganisationWhereInput[] | OrganisationWhereInput>;
  OR?: Maybe<OrganisationWhereInput[] | OrganisationWhereInput>;
  NOT?: Maybe<OrganisationWhereInput[] | OrganisationWhereInput>;
}

export interface OrganisationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrganisationWhereInput>;
  AND?: Maybe<
    OrganisationSubscriptionWhereInput[] | OrganisationSubscriptionWhereInput
  >;
  OR?: Maybe<
    OrganisationSubscriptionWhereInput[] | OrganisationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    OrganisationSubscriptionWhereInput[] | OrganisationSubscriptionWhereInput
  >;
}

export interface ApplicationCreateInput {
  id?: Maybe<ID_Input>;
  questions?: Maybe<QuestionCreateManyInput>;
  finances: FinancesCreateOneInput;
  team: TeamCreateOneInput;
}

export interface FinancesWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  location?: Maybe<LocationWhereInput>;
  cost?: Maybe<CostWhereInput>;
  AND?: Maybe<FinancesWhereInput[] | FinancesWhereInput>;
  OR?: Maybe<FinancesWhereInput[] | FinancesWhereInput>;
  NOT?: Maybe<FinancesWhereInput[] | FinancesWhereInput>;
}

export interface QuestionCreateManyInput {
  create?: Maybe<QuestionCreateInput[] | QuestionCreateInput>;
  connect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
}

export interface CostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  labour?: Maybe<Int>;
  labour_not?: Maybe<Int>;
  labour_in?: Maybe<Int[] | Int>;
  labour_not_in?: Maybe<Int[] | Int>;
  labour_lt?: Maybe<Int>;
  labour_lte?: Maybe<Int>;
  labour_gt?: Maybe<Int>;
  labour_gte?: Maybe<Int>;
  overhead?: Maybe<Int>;
  overhead_not?: Maybe<Int>;
  overhead_in?: Maybe<Int[] | Int>;
  overhead_not_in?: Maybe<Int[] | Int>;
  overhead_lt?: Maybe<Int>;
  overhead_lte?: Maybe<Int>;
  overhead_gt?: Maybe<Int>;
  overhead_gte?: Maybe<Int>;
  meterial?: Maybe<Int>;
  meterial_not?: Maybe<Int>;
  meterial_in?: Maybe<Int[] | Int>;
  meterial_not_in?: Maybe<Int[] | Int>;
  meterial_lt?: Maybe<Int>;
  meterial_lte?: Maybe<Int>;
  meterial_gt?: Maybe<Int>;
  meterial_gte?: Maybe<Int>;
  capital?: Maybe<Int>;
  capital_not?: Maybe<Int>;
  capital_in?: Maybe<Int[] | Int>;
  capital_not_in?: Maybe<Int[] | Int>;
  capital_lt?: Maybe<Int>;
  capital_lte?: Maybe<Int>;
  capital_gt?: Maybe<Int>;
  capital_gte?: Maybe<Int>;
  subcontracting?: Maybe<Int>;
  subcontracting_not?: Maybe<Int>;
  subcontracting_in?: Maybe<Int[] | Int>;
  subcontracting_not_in?: Maybe<Int[] | Int>;
  subcontracting_lt?: Maybe<Int>;
  subcontracting_lte?: Maybe<Int>;
  subcontracting_gt?: Maybe<Int>;
  subcontracting_gte?: Maybe<Int>;
  travel?: Maybe<Int>;
  travel_not?: Maybe<Int>;
  travel_in?: Maybe<Int[] | Int>;
  travel_not_in?: Maybe<Int[] | Int>;
  travel_lt?: Maybe<Int>;
  travel_lte?: Maybe<Int>;
  travel_gt?: Maybe<Int>;
  travel_gte?: Maybe<Int>;
  other?: Maybe<Int>;
  other_not?: Maybe<Int>;
  other_in?: Maybe<Int[] | Int>;
  other_not_in?: Maybe<Int[] | Int>;
  other_lt?: Maybe<Int>;
  other_lte?: Maybe<Int>;
  other_gt?: Maybe<Int>;
  other_gte?: Maybe<Int>;
  total?: Maybe<Int>;
  total_not?: Maybe<Int>;
  total_in?: Maybe<Int[] | Int>;
  total_not_in?: Maybe<Int[] | Int>;
  total_lt?: Maybe<Int>;
  total_lte?: Maybe<Int>;
  total_gt?: Maybe<Int>;
  total_gte?: Maybe<Int>;
  AND?: Maybe<CostWhereInput[] | CostWhereInput>;
  OR?: Maybe<CostWhereInput[] | CostWhereInput>;
  NOT?: Maybe<CostWhereInput[] | CostWhereInput>;
}

export interface QuestionCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  display: Boolean;
  answer: String;
  complete: Boolean;
}

export interface LocationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LocationWhereInput>;
  AND?: Maybe<
    LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput
  >;
  OR?: Maybe<LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput>;
  NOT?: Maybe<
    LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput
  >;
}

export interface FinancesCreateOneInput {
  create?: Maybe<FinancesCreateInput>;
  connect?: Maybe<FinancesWhereUniqueInput>;
}

export interface FinancesSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FinancesWhereInput>;
  AND?: Maybe<
    FinancesSubscriptionWhereInput[] | FinancesSubscriptionWhereInput
  >;
  OR?: Maybe<FinancesSubscriptionWhereInput[] | FinancesSubscriptionWhereInput>;
  NOT?: Maybe<
    FinancesSubscriptionWhereInput[] | FinancesSubscriptionWhereInput
  >;
}

export interface FinancesCreateInput {
  id?: Maybe<ID_Input>;
  location: LocationCreateOneInput;
  cost: CostCreateOneInput;
}

export interface CostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CostWhereInput>;
  AND?: Maybe<CostSubscriptionWhereInput[] | CostSubscriptionWhereInput>;
  OR?: Maybe<CostSubscriptionWhereInput[] | CostSubscriptionWhereInput>;
  NOT?: Maybe<CostSubscriptionWhereInput[] | CostSubscriptionWhereInput>;
}

export interface LocationCreateOneInput {
  create?: Maybe<LocationCreateInput>;
  connect?: Maybe<LocationWhereUniqueInput>;
}

export interface CompetitionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CompetitionWhereInput>;
  AND?: Maybe<
    CompetitionSubscriptionWhereInput[] | CompetitionSubscriptionWhereInput
  >;
  OR?: Maybe<
    CompetitionSubscriptionWhereInput[] | CompetitionSubscriptionWhereInput
  >;
  NOT?: Maybe<
    CompetitionSubscriptionWhereInput[] | CompetitionSubscriptionWhereInput
  >;
}

export interface LocationCreateInput {
  id?: Maybe<ID_Input>;
  postcode: String;
}

export interface ApplicationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ApplicationWhereInput>;
  AND?: Maybe<
    ApplicationSubscriptionWhereInput[] | ApplicationSubscriptionWhereInput
  >;
  OR?: Maybe<
    ApplicationSubscriptionWhereInput[] | ApplicationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ApplicationSubscriptionWhereInput[] | ApplicationSubscriptionWhereInput
  >;
}

export interface CostCreateOneInput {
  create?: Maybe<CostCreateInput>;
  connect?: Maybe<CostWhereUniqueInput>;
}

export interface VoteCreateInput {
  id?: Maybe<ID_Input>;
  link: LinkCreateOneWithoutVotesInput;
  user: UserCreateOneWithoutVotesInput;
}

export interface CostCreateInput {
  id?: Maybe<ID_Input>;
  labour?: Maybe<Int>;
  overhead?: Maybe<Int>;
  meterial?: Maybe<Int>;
  capital?: Maybe<Int>;
  subcontracting?: Maybe<Int>;
  travel?: Maybe<Int>;
  other?: Maybe<Int>;
  total?: Maybe<Int>;
}

export type CostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface TeamCreateOneInput {
  create?: Maybe<TeamCreateInput>;
  connect?: Maybe<TeamWhereUniqueInput>;
}

export interface TeamUpdateInput {
  applicant?: Maybe<UserUpdateOneRequiredInput>;
  organisation?: Maybe<OrganisationUpdateManyInput>;
}

export interface TeamCreateInput {
  id?: Maybe<ID_Input>;
  applicant: UserCreateOneInput;
  organisation?: Maybe<OrganisationCreateManyInput>;
}

export interface QuestionUpdateInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  display?: Maybe<Boolean>;
  answer?: Maybe<String>;
  complete?: Maybe<Boolean>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface OrganisationUpdateManyMutationInput {
  name?: Maybe<String>;
  type?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  links?: Maybe<LinkCreateManyWithoutPostedByInput>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
}

export interface OrganisationUpdateInput {
  name?: Maybe<String>;
  type?: Maybe<String>;
}

export interface LinkCreateManyWithoutPostedByInput {
  create?: Maybe<
    LinkCreateWithoutPostedByInput[] | LinkCreateWithoutPostedByInput
  >;
  connect?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
}

export interface LocationUpdateInput {
  postcode?: Maybe<String>;
}

export interface LinkCreateWithoutPostedByInput {
  id?: Maybe<ID_Input>;
  description: String;
  url: String;
  votes?: Maybe<VoteCreateManyWithoutLinkInput>;
}

export type FinancesWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface VoteCreateManyWithoutLinkInput {
  create?: Maybe<VoteCreateWithoutLinkInput[] | VoteCreateWithoutLinkInput>;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
}

export interface LinkCreateInput {
  id?: Maybe<ID_Input>;
  description: String;
  url: String;
  postedBy?: Maybe<UserCreateOneWithoutLinksInput>;
  votes?: Maybe<VoteCreateManyWithoutLinkInput>;
}

export interface VoteCreateWithoutLinkInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutVotesInput;
}

export interface DetailsUpdateManyMutationInput {
  title?: Maybe<String>;
  estimate?: Maybe<DateTimeInput>;
  duration?: Maybe<Int>;
  resubmission?: Maybe<Boolean>;
}

export interface UserCreateOneWithoutVotesInput {
  create?: Maybe<UserCreateWithoutVotesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface DetailsUpdateInput {
  title?: Maybe<String>;
  estimate?: Maybe<DateTimeInput>;
  duration?: Maybe<Int>;
  resubmission?: Maybe<Boolean>;
}

export interface UserCreateWithoutVotesInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  links?: Maybe<LinkCreateManyWithoutPostedByInput>;
}

export interface CostUpdateManyMutationInput {
  labour?: Maybe<Int>;
  overhead?: Maybe<Int>;
  meterial?: Maybe<Int>;
  capital?: Maybe<Int>;
  subcontracting?: Maybe<Int>;
  travel?: Maybe<Int>;
  other?: Maybe<Int>;
  total?: Maybe<Int>;
}

export interface VoteCreateManyWithoutUserInput {
  create?: Maybe<VoteCreateWithoutUserInput[] | VoteCreateWithoutUserInput>;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
}

export interface CostUpdateInput {
  labour?: Maybe<Int>;
  overhead?: Maybe<Int>;
  meterial?: Maybe<Int>;
  capital?: Maybe<Int>;
  subcontracting?: Maybe<Int>;
  travel?: Maybe<Int>;
  other?: Maybe<Int>;
  total?: Maybe<Int>;
}

export interface VoteCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  link: LinkCreateOneWithoutVotesInput;
}

export interface CompetitionUpdateInput {
  description?: Maybe<String>;
  title?: Maybe<String>;
  fundingType?: Maybe<String>;
  projectSize?: Maybe<String>;
  openTime?: Maybe<DateTimeInput>;
  closeTime?: Maybe<DateTimeInput>;
}

export interface LinkCreateOneWithoutVotesInput {
  create?: Maybe<LinkCreateWithoutVotesInput>;
  connect?: Maybe<LinkWhereUniqueInput>;
}

export type OrganisationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface LinkCreateWithoutVotesInput {
  id?: Maybe<ID_Input>;
  description: String;
  url: String;
  postedBy?: Maybe<UserCreateOneWithoutLinksInput>;
}

export interface OrganisationUpdateManyDataInput {
  name?: Maybe<String>;
  type?: Maybe<String>;
}

export interface UserCreateOneWithoutLinksInput {
  create?: Maybe<UserCreateWithoutLinksInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type QuestionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserCreateWithoutLinksInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
}

export interface OrganisationUpsertWithWhereUniqueNestedInput {
  where: OrganisationWhereUniqueInput;
  update: OrganisationUpdateDataInput;
  create: OrganisationCreateInput;
}

export interface OrganisationCreateManyInput {
  create?: Maybe<OrganisationCreateInput[] | OrganisationCreateInput>;
  connect?: Maybe<
    OrganisationWhereUniqueInput[] | OrganisationWhereUniqueInput
  >;
}

export type TeamWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface VoteUpdateWithoutUserDataInput {
  link?: Maybe<LinkUpdateOneRequiredWithoutVotesInput>;
}

export interface OrganisationUpdateManyInput {
  create?: Maybe<OrganisationCreateInput[] | OrganisationCreateInput>;
  update?: Maybe<
    | OrganisationUpdateWithWhereUniqueNestedInput[]
    | OrganisationUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | OrganisationUpsertWithWhereUniqueNestedInput[]
    | OrganisationUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<OrganisationWhereUniqueInput[] | OrganisationWhereUniqueInput>;
  connect?: Maybe<
    OrganisationWhereUniqueInput[] | OrganisationWhereUniqueInput
  >;
  set?: Maybe<OrganisationWhereUniqueInput[] | OrganisationWhereUniqueInput>;
  disconnect?: Maybe<
    OrganisationWhereUniqueInput[] | OrganisationWhereUniqueInput
  >;
  deleteMany?: Maybe<
    OrganisationScalarWhereInput[] | OrganisationScalarWhereInput
  >;
  updateMany?: Maybe<
    | OrganisationUpdateManyWithWhereNestedInput[]
    | OrganisationUpdateManyWithWhereNestedInput
  >;
}

export interface ApplicationUpdateInput {
  questions?: Maybe<QuestionUpdateManyInput>;
  finances?: Maybe<FinancesUpdateOneRequiredInput>;
  team?: Maybe<TeamUpdateOneRequiredInput>;
}

export interface VoteUpsertWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput;
  update: VoteUpdateWithoutUserDataInput;
  create: VoteCreateWithoutUserInput;
}

export interface QuestionUpdateManyInput {
  create?: Maybe<QuestionCreateInput[] | QuestionCreateInput>;
  update?: Maybe<
    | QuestionUpdateWithWhereUniqueNestedInput[]
    | QuestionUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | QuestionUpsertWithWhereUniqueNestedInput[]
    | QuestionUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  connect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  set?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  disconnect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  deleteMany?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
  updateMany?: Maybe<
    | QuestionUpdateManyWithWhereNestedInput[]
    | QuestionUpdateManyWithWhereNestedInput
  >;
}

export interface QuestionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  display?: Maybe<Boolean>;
  display_not?: Maybe<Boolean>;
  answer?: Maybe<String>;
  answer_not?: Maybe<String>;
  answer_in?: Maybe<String[] | String>;
  answer_not_in?: Maybe<String[] | String>;
  answer_lt?: Maybe<String>;
  answer_lte?: Maybe<String>;
  answer_gt?: Maybe<String>;
  answer_gte?: Maybe<String>;
  answer_contains?: Maybe<String>;
  answer_not_contains?: Maybe<String>;
  answer_starts_with?: Maybe<String>;
  answer_not_starts_with?: Maybe<String>;
  answer_ends_with?: Maybe<String>;
  answer_not_ends_with?: Maybe<String>;
  complete?: Maybe<Boolean>;
  complete_not?: Maybe<Boolean>;
  AND?: Maybe<QuestionWhereInput[] | QuestionWhereInput>;
  OR?: Maybe<QuestionWhereInput[] | QuestionWhereInput>;
  NOT?: Maybe<QuestionWhereInput[] | QuestionWhereInput>;
}

export interface QuestionUpdateWithWhereUniqueNestedInput {
  where: QuestionWhereUniqueInput;
  data: QuestionUpdateDataInput;
}

export interface UserUpsertWithoutLinksInput {
  update: UserUpdateWithoutLinksDataInput;
  create: UserCreateWithoutLinksInput;
}

export interface QuestionUpdateDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  display?: Maybe<Boolean>;
  answer?: Maybe<String>;
  complete?: Maybe<Boolean>;
}

export interface VoteWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  link?: Maybe<LinkWhereInput>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<VoteWhereInput[] | VoteWhereInput>;
  OR?: Maybe<VoteWhereInput[] | VoteWhereInput>;
  NOT?: Maybe<VoteWhereInput[] | VoteWhereInput>;
}

export interface QuestionUpsertWithWhereUniqueNestedInput {
  where: QuestionWhereUniqueInput;
  update: QuestionUpdateDataInput;
  create: QuestionCreateInput;
}

export interface TeamSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TeamWhereInput>;
  AND?: Maybe<TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput>;
  OR?: Maybe<TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput>;
  NOT?: Maybe<TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput>;
}

export interface QuestionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  display?: Maybe<Boolean>;
  display_not?: Maybe<Boolean>;
  answer?: Maybe<String>;
  answer_not?: Maybe<String>;
  answer_in?: Maybe<String[] | String>;
  answer_not_in?: Maybe<String[] | String>;
  answer_lt?: Maybe<String>;
  answer_lte?: Maybe<String>;
  answer_gt?: Maybe<String>;
  answer_gte?: Maybe<String>;
  answer_contains?: Maybe<String>;
  answer_not_contains?: Maybe<String>;
  answer_starts_with?: Maybe<String>;
  answer_not_starts_with?: Maybe<String>;
  answer_ends_with?: Maybe<String>;
  answer_not_ends_with?: Maybe<String>;
  complete?: Maybe<Boolean>;
  complete_not?: Maybe<Boolean>;
  AND?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
  OR?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
  NOT?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
}

export interface ApplicationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  questions_every?: Maybe<QuestionWhereInput>;
  questions_some?: Maybe<QuestionWhereInput>;
  questions_none?: Maybe<QuestionWhereInput>;
  finances?: Maybe<FinancesWhereInput>;
  team?: Maybe<TeamWhereInput>;
  AND?: Maybe<ApplicationWhereInput[] | ApplicationWhereInput>;
  OR?: Maybe<ApplicationWhereInput[] | ApplicationWhereInput>;
  NOT?: Maybe<ApplicationWhereInput[] | ApplicationWhereInput>;
}

export interface QuestionUpdateManyWithWhereNestedInput {
  where: QuestionScalarWhereInput;
  data: QuestionUpdateManyDataInput;
}

export interface TeamWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  applicant?: Maybe<UserWhereInput>;
  organisation_every?: Maybe<OrganisationWhereInput>;
  organisation_some?: Maybe<OrganisationWhereInput>;
  organisation_none?: Maybe<OrganisationWhereInput>;
  AND?: Maybe<TeamWhereInput[] | TeamWhereInput>;
  OR?: Maybe<TeamWhereInput[] | TeamWhereInput>;
  NOT?: Maybe<TeamWhereInput[] | TeamWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  links_every?: Maybe<LinkWhereInput>;
  links_some?: Maybe<LinkWhereInput>;
  links_none?: Maybe<LinkWhereInput>;
  votes_every?: Maybe<VoteWhereInput>;
  votes_some?: Maybe<VoteWhereInput>;
  votes_none?: Maybe<VoteWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface DetailsSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DetailsWhereInput>;
  AND?: Maybe<DetailsSubscriptionWhereInput[] | DetailsSubscriptionWhereInput>;
  OR?: Maybe<DetailsSubscriptionWhereInput[] | DetailsSubscriptionWhereInput>;
  NOT?: Maybe<DetailsSubscriptionWhereInput[] | DetailsSubscriptionWhereInput>;
}

export interface FinancesUpdateOneRequiredInput {
  create?: Maybe<FinancesCreateInput>;
  update?: Maybe<FinancesUpdateDataInput>;
  upsert?: Maybe<FinancesUpsertNestedInput>;
  connect?: Maybe<FinancesWhereUniqueInput>;
}

export interface CompetitionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  fundingType?: Maybe<String>;
  fundingType_not?: Maybe<String>;
  fundingType_in?: Maybe<String[] | String>;
  fundingType_not_in?: Maybe<String[] | String>;
  fundingType_lt?: Maybe<String>;
  fundingType_lte?: Maybe<String>;
  fundingType_gt?: Maybe<String>;
  fundingType_gte?: Maybe<String>;
  fundingType_contains?: Maybe<String>;
  fundingType_not_contains?: Maybe<String>;
  fundingType_starts_with?: Maybe<String>;
  fundingType_not_starts_with?: Maybe<String>;
  fundingType_ends_with?: Maybe<String>;
  fundingType_not_ends_with?: Maybe<String>;
  projectSize?: Maybe<String>;
  projectSize_not?: Maybe<String>;
  projectSize_in?: Maybe<String[] | String>;
  projectSize_not_in?: Maybe<String[] | String>;
  projectSize_lt?: Maybe<String>;
  projectSize_lte?: Maybe<String>;
  projectSize_gt?: Maybe<String>;
  projectSize_gte?: Maybe<String>;
  projectSize_contains?: Maybe<String>;
  projectSize_not_contains?: Maybe<String>;
  projectSize_starts_with?: Maybe<String>;
  projectSize_not_starts_with?: Maybe<String>;
  projectSize_ends_with?: Maybe<String>;
  projectSize_not_ends_with?: Maybe<String>;
  openTime?: Maybe<DateTimeInput>;
  openTime_not?: Maybe<DateTimeInput>;
  openTime_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  openTime_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  openTime_lt?: Maybe<DateTimeInput>;
  openTime_lte?: Maybe<DateTimeInput>;
  openTime_gt?: Maybe<DateTimeInput>;
  openTime_gte?: Maybe<DateTimeInput>;
  closeTime?: Maybe<DateTimeInput>;
  closeTime_not?: Maybe<DateTimeInput>;
  closeTime_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  closeTime_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  closeTime_lt?: Maybe<DateTimeInput>;
  closeTime_lte?: Maybe<DateTimeInput>;
  closeTime_gt?: Maybe<DateTimeInput>;
  closeTime_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CompetitionWhereInput[] | CompetitionWhereInput>;
  OR?: Maybe<CompetitionWhereInput[] | CompetitionWhereInput>;
  NOT?: Maybe<CompetitionWhereInput[] | CompetitionWhereInput>;
}

export interface FinancesUpdateDataInput {
  location?: Maybe<LocationUpdateOneRequiredInput>;
  cost?: Maybe<CostUpdateOneRequiredInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface LocationUpdateOneRequiredInput {
  create?: Maybe<LocationCreateInput>;
  update?: Maybe<LocationUpdateDataInput>;
  upsert?: Maybe<LocationUpsertNestedInput>;
  connect?: Maybe<LocationWhereUniqueInput>;
}

export interface QuestionUpdateManyMutationInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  display?: Maybe<Boolean>;
  answer?: Maybe<String>;
  complete?: Maybe<Boolean>;
}

export interface LocationUpdateDataInput {
  postcode?: Maybe<String>;
}

export interface DetailsWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  estimate?: Maybe<DateTimeInput>;
  estimate_not?: Maybe<DateTimeInput>;
  estimate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  estimate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  estimate_lt?: Maybe<DateTimeInput>;
  estimate_lte?: Maybe<DateTimeInput>;
  estimate_gt?: Maybe<DateTimeInput>;
  estimate_gte?: Maybe<DateTimeInput>;
  duration?: Maybe<Int>;
  duration_not?: Maybe<Int>;
  duration_in?: Maybe<Int[] | Int>;
  duration_not_in?: Maybe<Int[] | Int>;
  duration_lt?: Maybe<Int>;
  duration_lte?: Maybe<Int>;
  duration_gt?: Maybe<Int>;
  duration_gte?: Maybe<Int>;
  resubmission?: Maybe<Boolean>;
  resubmission_not?: Maybe<Boolean>;
  AND?: Maybe<DetailsWhereInput[] | DetailsWhereInput>;
  OR?: Maybe<DetailsWhereInput[] | DetailsWhereInput>;
  NOT?: Maybe<DetailsWhereInput[] | DetailsWhereInput>;
}

export interface LocationUpsertNestedInput {
  update: LocationUpdateDataInput;
  create: LocationCreateInput;
}

export interface LinkUpdateManyMutationInput {
  description?: Maybe<String>;
  url?: Maybe<String>;
}

export interface CostUpdateOneRequiredInput {
  create?: Maybe<CostCreateInput>;
  update?: Maybe<CostUpdateDataInput>;
  upsert?: Maybe<CostUpsertNestedInput>;
  connect?: Maybe<CostWhereUniqueInput>;
}

export interface FinancesUpdateInput {
  location?: Maybe<LocationUpdateOneRequiredInput>;
  cost?: Maybe<CostUpdateOneRequiredInput>;
}

export interface CostUpdateDataInput {
  labour?: Maybe<Int>;
  overhead?: Maybe<Int>;
  meterial?: Maybe<Int>;
  capital?: Maybe<Int>;
  subcontracting?: Maybe<Int>;
  travel?: Maybe<Int>;
  other?: Maybe<Int>;
  total?: Maybe<Int>;
}

export interface DetailsCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  estimate: DateTimeInput;
  duration: Int;
  resubmission: Boolean;
}

export interface CostUpsertNestedInput {
  update: CostUpdateDataInput;
  create: CostCreateInput;
}

export interface CompetitionUpdateManyMutationInput {
  description?: Maybe<String>;
  title?: Maybe<String>;
  fundingType?: Maybe<String>;
  projectSize?: Maybe<String>;
  openTime?: Maybe<DateTimeInput>;
  closeTime?: Maybe<DateTimeInput>;
}

export interface FinancesUpsertNestedInput {
  update: FinancesUpdateDataInput;
  create: FinancesCreateInput;
}

export interface TeamUpsertNestedInput {
  update: TeamUpdateDataInput;
  create: TeamCreateInput;
}

export interface TeamUpdateOneRequiredInput {
  create?: Maybe<TeamCreateInput>;
  update?: Maybe<TeamUpdateDataInput>;
  upsert?: Maybe<TeamUpsertNestedInput>;
  connect?: Maybe<TeamWhereUniqueInput>;
}

export interface OrganisationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  AND?: Maybe<OrganisationScalarWhereInput[] | OrganisationScalarWhereInput>;
  OR?: Maybe<OrganisationScalarWhereInput[] | OrganisationScalarWhereInput>;
  NOT?: Maybe<OrganisationScalarWhereInput[] | OrganisationScalarWhereInput>;
}

export interface TeamUpdateDataInput {
  applicant?: Maybe<UserUpdateOneRequiredInput>;
  organisation?: Maybe<OrganisationUpdateManyInput>;
}

export interface OrganisationUpdateWithWhereUniqueNestedInput {
  where: OrganisationWhereUniqueInput;
  data: OrganisationUpdateDataInput;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface UserUpdateDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  links?: Maybe<LinkUpdateManyWithoutPostedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
}

export interface UserUpdateWithoutLinksDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
}

export interface LinkUpdateManyWithoutPostedByInput {
  create?: Maybe<
    LinkCreateWithoutPostedByInput[] | LinkCreateWithoutPostedByInput
  >;
  delete?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
  connect?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
  set?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
  disconnect?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
  update?: Maybe<
    | LinkUpdateWithWhereUniqueWithoutPostedByInput[]
    | LinkUpdateWithWhereUniqueWithoutPostedByInput
  >;
  upsert?: Maybe<
    | LinkUpsertWithWhereUniqueWithoutPostedByInput[]
    | LinkUpsertWithWhereUniqueWithoutPostedByInput
  >;
  deleteMany?: Maybe<LinkScalarWhereInput[] | LinkScalarWhereInput>;
  updateMany?: Maybe<
    LinkUpdateManyWithWhereNestedInput[] | LinkUpdateManyWithWhereNestedInput
  >;
}

export interface QuestionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<QuestionWhereInput>;
  AND?: Maybe<
    QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput
  >;
  OR?: Maybe<QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput>;
  NOT?: Maybe<
    QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput
  >;
}

export interface LinkUpdateWithWhereUniqueWithoutPostedByInput {
  where: LinkWhereUniqueInput;
  data: LinkUpdateWithoutPostedByDataInput;
}

export interface LinkSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LinkWhereInput>;
  AND?: Maybe<LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput>;
  OR?: Maybe<LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput>;
  NOT?: Maybe<LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput>;
}

export interface LinkUpdateWithoutPostedByDataInput {
  description?: Maybe<String>;
  url?: Maybe<String>;
  votes?: Maybe<VoteUpdateManyWithoutLinkInput>;
}

export interface VoteUpdateInput {
  link?: Maybe<LinkUpdateOneRequiredWithoutVotesInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutVotesInput>;
}

export interface VoteUpdateManyWithoutLinkInput {
  create?: Maybe<VoteCreateWithoutLinkInput[] | VoteCreateWithoutLinkInput>;
  delete?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  set?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  disconnect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  update?: Maybe<
    | VoteUpdateWithWhereUniqueWithoutLinkInput[]
    | VoteUpdateWithWhereUniqueWithoutLinkInput
  >;
  upsert?: Maybe<
    | VoteUpsertWithWhereUniqueWithoutLinkInput[]
    | VoteUpsertWithWhereUniqueWithoutLinkInput
  >;
  deleteMany?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
}

export type DetailsWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface VoteUpdateWithWhereUniqueWithoutLinkInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateWithoutLinkDataInput;
}

export interface LinkUpdateInput {
  description?: Maybe<String>;
  url?: Maybe<String>;
  postedBy?: Maybe<UserUpdateOneWithoutLinksInput>;
  votes?: Maybe<VoteUpdateManyWithoutLinkInput>;
}

export interface VoteUpdateWithoutLinkDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutVotesInput>;
}

export type LocationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpdateOneRequiredWithoutVotesInput {
  create?: Maybe<UserCreateWithoutVotesInput>;
  update?: Maybe<UserUpdateWithoutVotesDataInput>;
  upsert?: Maybe<UserUpsertWithoutVotesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface OrganisationUpdateManyWithWhereNestedInput {
  where: OrganisationScalarWhereInput;
  data: OrganisationUpdateManyDataInput;
}

export interface UserUpdateWithoutVotesDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  links?: Maybe<LinkUpdateManyWithoutPostedByInput>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserUpsertWithoutVotesInput {
  update: UserUpdateWithoutVotesDataInput;
  create: UserCreateWithoutVotesInput;
}

export interface VoteSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<VoteWhereInput>;
  AND?: Maybe<VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput>;
  OR?: Maybe<VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput>;
  NOT?: Maybe<VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput>;
}

export interface VoteUpsertWithWhereUniqueWithoutLinkInput {
  where: VoteWhereUniqueInput;
  update: VoteUpdateWithoutLinkDataInput;
  create: VoteCreateWithoutLinkInput;
}

export type CompetitionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface VoteScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  AND?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
  OR?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
  NOT?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
}

export interface LocationUpdateManyMutationInput {
  postcode?: Maybe<String>;
}

export interface LinkUpsertWithWhereUniqueWithoutPostedByInput {
  where: LinkWhereUniqueInput;
  update: LinkUpdateWithoutPostedByDataInput;
  create: LinkCreateWithoutPostedByInput;
}

export interface CompetitionCreateInput {
  id?: Maybe<ID_Input>;
  description: String;
  title: String;
  fundingType: String;
  projectSize: String;
  openTime: DateTimeInput;
  closeTime: DateTimeInput;
}

export interface VoteUpdateManyWithoutUserInput {
  create?: Maybe<VoteCreateWithoutUserInput[] | VoteCreateWithoutUserInput>;
  delete?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  set?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  disconnect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  update?: Maybe<
    | VoteUpdateWithWhereUniqueWithoutUserInput[]
    | VoteUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | VoteUpsertWithWhereUniqueWithoutUserInput[]
    | VoteUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
}

export interface LinkUpdateManyDataInput {
  description?: Maybe<String>;
  url?: Maybe<String>;
}

export interface LinkUpdateManyWithWhereNestedInput {
  where: LinkScalarWhereInput;
  data: LinkUpdateManyDataInput;
}

export interface LinkScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  AND?: Maybe<LinkScalarWhereInput[] | LinkScalarWhereInput>;
  OR?: Maybe<LinkScalarWhereInput[] | LinkScalarWhereInput>;
  NOT?: Maybe<LinkScalarWhereInput[] | LinkScalarWhereInput>;
}

export interface OrganisationUpdateDataInput {
  name?: Maybe<String>;
  type?: Maybe<String>;
}

export type LinkWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  links?: Maybe<LinkUpdateManyWithoutPostedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
}

export interface LocationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  postcode?: Maybe<String>;
  postcode_not?: Maybe<String>;
  postcode_in?: Maybe<String[] | String>;
  postcode_not_in?: Maybe<String[] | String>;
  postcode_lt?: Maybe<String>;
  postcode_lte?: Maybe<String>;
  postcode_gt?: Maybe<String>;
  postcode_gte?: Maybe<String>;
  postcode_contains?: Maybe<String>;
  postcode_not_contains?: Maybe<String>;
  postcode_starts_with?: Maybe<String>;
  postcode_not_starts_with?: Maybe<String>;
  postcode_ends_with?: Maybe<String>;
  postcode_not_ends_with?: Maybe<String>;
  AND?: Maybe<LocationWhereInput[] | LocationWhereInput>;
  OR?: Maybe<LocationWhereInput[] | LocationWhereInput>;
  NOT?: Maybe<LocationWhereInput[] | LocationWhereInput>;
}

export interface LinkUpsertWithoutVotesInput {
  update: LinkUpdateWithoutVotesDataInput;
  create: LinkCreateWithoutVotesInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface VotePreviousValues {
  id: ID_Output;
}

export interface VotePreviousValuesPromise
  extends Promise<VotePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface VotePreviousValuesSubscription
  extends Promise<AsyncIterator<VotePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface CostConnection {
  pageInfo: PageInfo;
  edges: CostEdge[];
}

export interface CostConnectionPromise
  extends Promise<CostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CostEdge>>() => T;
  aggregate: <T = AggregateCostPromise>() => T;
}

export interface CostConnectionSubscription
  extends Promise<AsyncIterator<CostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CostEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCostSubscription>() => T;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  links: <T = FragmentableArray<Link>>(args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  links: <T = Promise<AsyncIterator<LinkSubscription>>>(args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  votes: <T = Promise<AsyncIterator<VoteSubscription>>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  links: <T = FragmentableArray<Link>>(args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Finances {
  id: ID_Output;
}

export interface FinancesPromise extends Promise<Finances>, Fragmentable {
  id: () => Promise<ID_Output>;
  location: <T = LocationPromise>() => T;
  cost: <T = CostPromise>() => T;
}

export interface FinancesSubscription
  extends Promise<AsyncIterator<Finances>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  location: <T = LocationSubscription>() => T;
  cost: <T = CostSubscription>() => T;
}

export interface FinancesNullablePromise
  extends Promise<Finances | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  location: <T = LocationPromise>() => T;
  cost: <T = CostPromise>() => T;
}

export interface AggregateCompetition {
  count: Int;
}

export interface AggregateCompetitionPromise
  extends Promise<AggregateCompetition>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCompetitionSubscription
  extends Promise<AsyncIterator<AggregateCompetition>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateVote {
  count: Int;
}

export interface AggregateVotePromise
  extends Promise<AggregateVote>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVoteSubscription
  extends Promise<AsyncIterator<AggregateVote>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface VoteConnection {
  pageInfo: PageInfo;
  edges: VoteEdge[];
}

export interface VoteConnectionPromise
  extends Promise<VoteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VoteEdge>>() => T;
  aggregate: <T = AggregateVotePromise>() => T;
}

export interface VoteConnectionSubscription
  extends Promise<AsyncIterator<VoteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VoteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVoteSubscription>() => T;
}

export interface CompetitionEdge {
  node: Competition;
  cursor: String;
}

export interface CompetitionEdgePromise
  extends Promise<CompetitionEdge>,
    Fragmentable {
  node: <T = CompetitionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CompetitionEdgeSubscription
  extends Promise<AsyncIterator<CompetitionEdge>>,
    Fragmentable {
  node: <T = CompetitionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CompetitionConnection {
  pageInfo: PageInfo;
  edges: CompetitionEdge[];
}

export interface CompetitionConnectionPromise
  extends Promise<CompetitionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CompetitionEdge>>() => T;
  aggregate: <T = AggregateCompetitionPromise>() => T;
}

export interface CompetitionConnectionSubscription
  extends Promise<AsyncIterator<CompetitionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CompetitionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCompetitionSubscription>() => T;
}

export interface AggregateTeam {
  count: Int;
}

export interface AggregateTeamPromise
  extends Promise<AggregateTeam>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTeamSubscription
  extends Promise<AsyncIterator<AggregateTeam>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Location {
  id: ID_Output;
  postcode: String;
}

export interface LocationPromise extends Promise<Location>, Fragmentable {
  id: () => Promise<ID_Output>;
  postcode: () => Promise<String>;
}

export interface LocationSubscription
  extends Promise<AsyncIterator<Location>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  postcode: () => Promise<AsyncIterator<String>>;
}

export interface LocationNullablePromise
  extends Promise<Location | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  postcode: () => Promise<String>;
}

export interface TeamConnection {
  pageInfo: PageInfo;
  edges: TeamEdge[];
}

export interface TeamConnectionPromise
  extends Promise<TeamConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TeamEdge>>() => T;
  aggregate: <T = AggregateTeamPromise>() => T;
}

export interface TeamConnectionSubscription
  extends Promise<AsyncIterator<TeamConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TeamEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTeamSubscription>() => T;
}

export interface Application {
  id: ID_Output;
}

export interface ApplicationPromise extends Promise<Application>, Fragmentable {
  id: () => Promise<ID_Output>;
  questions: <T = FragmentableArray<Question>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  finances: <T = FinancesPromise>() => T;
  team: <T = TeamPromise>() => T;
}

export interface ApplicationSubscription
  extends Promise<AsyncIterator<Application>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  questions: <T = Promise<AsyncIterator<QuestionSubscription>>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  finances: <T = FinancesSubscription>() => T;
  team: <T = TeamSubscription>() => T;
}

export interface ApplicationNullablePromise
  extends Promise<Application | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  questions: <T = FragmentableArray<Question>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  finances: <T = FinancesPromise>() => T;
  team: <T = TeamPromise>() => T;
}

export interface AggregateQuestion {
  count: Int;
}

export interface AggregateQuestionPromise
  extends Promise<AggregateQuestion>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateQuestionSubscription
  extends Promise<AsyncIterator<AggregateQuestion>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ApplicationSubscriptionPayload {
  mutation: MutationType;
  node: Application;
  updatedFields: String[];
  previousValues: ApplicationPreviousValues;
}

export interface ApplicationSubscriptionPayloadPromise
  extends Promise<ApplicationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ApplicationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ApplicationPreviousValuesPromise>() => T;
}

export interface ApplicationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ApplicationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ApplicationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ApplicationPreviousValuesSubscription>() => T;
}

export interface QuestionConnection {
  pageInfo: PageInfo;
  edges: QuestionEdge[];
}

export interface QuestionConnectionPromise
  extends Promise<QuestionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<QuestionEdge>>() => T;
  aggregate: <T = AggregateQuestionPromise>() => T;
}

export interface QuestionConnectionSubscription
  extends Promise<AsyncIterator<QuestionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<QuestionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateQuestionSubscription>() => T;
}

export interface ApplicationPreviousValues {
  id: ID_Output;
}

export interface ApplicationPreviousValuesPromise
  extends Promise<ApplicationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface ApplicationPreviousValuesSubscription
  extends Promise<AsyncIterator<ApplicationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface OrganisationEdge {
  node: Organisation;
  cursor: String;
}

export interface OrganisationEdgePromise
  extends Promise<OrganisationEdge>,
    Fragmentable {
  node: <T = OrganisationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrganisationEdgeSubscription
  extends Promise<AsyncIterator<OrganisationEdge>>,
    Fragmentable {
  node: <T = OrganisationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Competition {
  id: ID_Output;
  description: String;
  title: String;
  fundingType: String;
  projectSize: String;
  openTime: DateTimeOutput;
  closeTime: DateTimeOutput;
}

export interface CompetitionPromise extends Promise<Competition>, Fragmentable {
  id: () => Promise<ID_Output>;
  description: () => Promise<String>;
  title: () => Promise<String>;
  fundingType: () => Promise<String>;
  projectSize: () => Promise<String>;
  openTime: () => Promise<DateTimeOutput>;
  closeTime: () => Promise<DateTimeOutput>;
}

export interface CompetitionSubscription
  extends Promise<AsyncIterator<Competition>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  description: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  fundingType: () => Promise<AsyncIterator<String>>;
  projectSize: () => Promise<AsyncIterator<String>>;
  openTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  closeTime: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CompetitionNullablePromise
  extends Promise<Competition | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  description: () => Promise<String>;
  title: () => Promise<String>;
  fundingType: () => Promise<String>;
  projectSize: () => Promise<String>;
  openTime: () => Promise<DateTimeOutput>;
  closeTime: () => Promise<DateTimeOutput>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CompetitionSubscriptionPayload {
  mutation: MutationType;
  node: Competition;
  updatedFields: String[];
  previousValues: CompetitionPreviousValues;
}

export interface CompetitionSubscriptionPayloadPromise
  extends Promise<CompetitionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CompetitionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CompetitionPreviousValuesPromise>() => T;
}

export interface CompetitionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CompetitionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CompetitionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CompetitionPreviousValuesSubscription>() => T;
}

export interface AggregateLocation {
  count: Int;
}

export interface AggregateLocationPromise
  extends Promise<AggregateLocation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLocationSubscription
  extends Promise<AsyncIterator<AggregateLocation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CompetitionPreviousValues {
  id: ID_Output;
  description: String;
  title: String;
  fundingType: String;
  projectSize: String;
  openTime: DateTimeOutput;
  closeTime: DateTimeOutput;
}

export interface CompetitionPreviousValuesPromise
  extends Promise<CompetitionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  description: () => Promise<String>;
  title: () => Promise<String>;
  fundingType: () => Promise<String>;
  projectSize: () => Promise<String>;
  openTime: () => Promise<DateTimeOutput>;
  closeTime: () => Promise<DateTimeOutput>;
}

export interface CompetitionPreviousValuesSubscription
  extends Promise<AsyncIterator<CompetitionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  description: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  fundingType: () => Promise<AsyncIterator<String>>;
  projectSize: () => Promise<AsyncIterator<String>>;
  openTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  closeTime: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface LocationConnection {
  pageInfo: PageInfo;
  edges: LocationEdge[];
}

export interface LocationConnectionPromise
  extends Promise<LocationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LocationEdge>>() => T;
  aggregate: <T = AggregateLocationPromise>() => T;
}

export interface LocationConnectionSubscription
  extends Promise<AsyncIterator<LocationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LocationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLocationSubscription>() => T;
}

export interface AggregateApplication {
  count: Int;
}

export interface AggregateApplicationPromise
  extends Promise<AggregateApplication>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateApplicationSubscription
  extends Promise<AsyncIterator<AggregateApplication>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateLink {
  count: Int;
}

export interface AggregateLinkPromise
  extends Promise<AggregateLink>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLinkSubscription
  extends Promise<AsyncIterator<AggregateLink>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CostSubscriptionPayload {
  mutation: MutationType;
  node: Cost;
  updatedFields: String[];
  previousValues: CostPreviousValues;
}

export interface CostSubscriptionPayloadPromise
  extends Promise<CostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CostPreviousValuesPromise>() => T;
}

export interface CostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CostPreviousValuesSubscription>() => T;
}

export interface LinkConnection {
  pageInfo: PageInfo;
  edges: LinkEdge[];
}

export interface LinkConnectionPromise
  extends Promise<LinkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LinkEdge>>() => T;
  aggregate: <T = AggregateLinkPromise>() => T;
}

export interface LinkConnectionSubscription
  extends Promise<AsyncIterator<LinkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LinkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLinkSubscription>() => T;
}

export interface CostPreviousValues {
  id: ID_Output;
  labour?: Int;
  overhead?: Int;
  meterial?: Int;
  capital?: Int;
  subcontracting?: Int;
  travel?: Int;
  other?: Int;
  total?: Int;
}

export interface CostPreviousValuesPromise
  extends Promise<CostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  labour: () => Promise<Int>;
  overhead: () => Promise<Int>;
  meterial: () => Promise<Int>;
  capital: () => Promise<Int>;
  subcontracting: () => Promise<Int>;
  travel: () => Promise<Int>;
  other: () => Promise<Int>;
  total: () => Promise<Int>;
}

export interface CostPreviousValuesSubscription
  extends Promise<AsyncIterator<CostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  labour: () => Promise<AsyncIterator<Int>>;
  overhead: () => Promise<AsyncIterator<Int>>;
  meterial: () => Promise<AsyncIterator<Int>>;
  capital: () => Promise<AsyncIterator<Int>>;
  subcontracting: () => Promise<AsyncIterator<Int>>;
  travel: () => Promise<AsyncIterator<Int>>;
  other: () => Promise<AsyncIterator<Int>>;
  total: () => Promise<AsyncIterator<Int>>;
}

export interface FinancesEdge {
  node: Finances;
  cursor: String;
}

export interface FinancesEdgePromise
  extends Promise<FinancesEdge>,
    Fragmentable {
  node: <T = FinancesPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FinancesEdgeSubscription
  extends Promise<AsyncIterator<FinancesEdge>>,
    Fragmentable {
  node: <T = FinancesSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ApplicationEdge {
  node: Application;
  cursor: String;
}

export interface ApplicationEdgePromise
  extends Promise<ApplicationEdge>,
    Fragmentable {
  node: <T = ApplicationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ApplicationEdgeSubscription
  extends Promise<AsyncIterator<ApplicationEdge>>,
    Fragmentable {
  node: <T = ApplicationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface DetailsSubscriptionPayload {
  mutation: MutationType;
  node: Details;
  updatedFields: String[];
  previousValues: DetailsPreviousValues;
}

export interface DetailsSubscriptionPayloadPromise
  extends Promise<DetailsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DetailsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DetailsPreviousValuesPromise>() => T;
}

export interface DetailsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DetailsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DetailsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DetailsPreviousValuesSubscription>() => T;
}

export interface DetailsEdge {
  node: Details;
  cursor: String;
}

export interface DetailsEdgePromise extends Promise<DetailsEdge>, Fragmentable {
  node: <T = DetailsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DetailsEdgeSubscription
  extends Promise<AsyncIterator<DetailsEdge>>,
    Fragmentable {
  node: <T = DetailsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface DetailsPreviousValues {
  id: ID_Output;
  title: String;
  estimate: DateTimeOutput;
  duration: Int;
  resubmission: Boolean;
}

export interface DetailsPreviousValuesPromise
  extends Promise<DetailsPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  estimate: () => Promise<DateTimeOutput>;
  duration: () => Promise<Int>;
  resubmission: () => Promise<Boolean>;
}

export interface DetailsPreviousValuesSubscription
  extends Promise<AsyncIterator<DetailsPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  estimate: () => Promise<AsyncIterator<DateTimeOutput>>;
  duration: () => Promise<AsyncIterator<Int>>;
  resubmission: () => Promise<AsyncIterator<Boolean>>;
}

export interface Question {
  id: ID_Output;
  title: String;
  description: String;
  display: Boolean;
  answer: String;
  complete: Boolean;
}

export interface QuestionPromise extends Promise<Question>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  display: () => Promise<Boolean>;
  answer: () => Promise<String>;
  complete: () => Promise<Boolean>;
}

export interface QuestionSubscription
  extends Promise<AsyncIterator<Question>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  display: () => Promise<AsyncIterator<Boolean>>;
  answer: () => Promise<AsyncIterator<String>>;
  complete: () => Promise<AsyncIterator<Boolean>>;
}

export interface QuestionNullablePromise
  extends Promise<Question | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  display: () => Promise<Boolean>;
  answer: () => Promise<String>;
  complete: () => Promise<Boolean>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCost {
  count: Int;
}

export interface AggregateCostPromise
  extends Promise<AggregateCost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCostSubscription
  extends Promise<AsyncIterator<AggregateCost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FinancesSubscriptionPayload {
  mutation: MutationType;
  node: Finances;
  updatedFields: String[];
  previousValues: FinancesPreviousValues;
}

export interface FinancesSubscriptionPayloadPromise
  extends Promise<FinancesSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FinancesPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FinancesPreviousValuesPromise>() => T;
}

export interface FinancesSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FinancesSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FinancesSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FinancesPreviousValuesSubscription>() => T;
}

export interface VoteEdge {
  node: Vote;
  cursor: String;
}

export interface VoteEdgePromise extends Promise<VoteEdge>, Fragmentable {
  node: <T = VotePromise>() => T;
  cursor: () => Promise<String>;
}

export interface VoteEdgeSubscription
  extends Promise<AsyncIterator<VoteEdge>>,
    Fragmentable {
  node: <T = VoteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface FinancesPreviousValues {
  id: ID_Output;
}

export interface FinancesPreviousValuesPromise
  extends Promise<FinancesPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface FinancesPreviousValuesSubscription
  extends Promise<AsyncIterator<FinancesPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface ApplicationConnection {
  pageInfo: PageInfo;
  edges: ApplicationEdge[];
}

export interface ApplicationConnectionPromise
  extends Promise<ApplicationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ApplicationEdge>>() => T;
  aggregate: <T = AggregateApplicationPromise>() => T;
}

export interface ApplicationConnectionSubscription
  extends Promise<AsyncIterator<ApplicationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ApplicationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateApplicationSubscription>() => T;
}

export interface VoteSubscriptionPayload {
  mutation: MutationType;
  node: Vote;
  updatedFields: String[];
  previousValues: VotePreviousValues;
}

export interface VoteSubscriptionPayloadPromise
  extends Promise<VoteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VotePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VotePreviousValuesPromise>() => T;
}

export interface VoteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VoteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VoteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VotePreviousValuesSubscription>() => T;
}

export interface LinkSubscriptionPayload {
  mutation: MutationType;
  node: Link;
  updatedFields: String[];
  previousValues: LinkPreviousValues;
}

export interface LinkSubscriptionPayloadPromise
  extends Promise<LinkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LinkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LinkPreviousValuesPromise>() => T;
}

export interface LinkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LinkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LinkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LinkPreviousValuesSubscription>() => T;
}

export interface AggregateOrganisation {
  count: Int;
}

export interface AggregateOrganisationPromise
  extends Promise<AggregateOrganisation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrganisationSubscription
  extends Promise<AsyncIterator<AggregateOrganisation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LinkPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  description: String;
  url: String;
}

export interface LinkPreviousValuesPromise
  extends Promise<LinkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  url: () => Promise<String>;
}

export interface LinkPreviousValuesSubscription
  extends Promise<AsyncIterator<LinkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface Link {
  id: ID_Output;
  createdAt: DateTimeOutput;
  description: String;
  url: String;
}

export interface LinkPromise extends Promise<Link>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  url: () => Promise<String>;
  postedBy: <T = UserPromise>() => T;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface LinkSubscription
  extends Promise<AsyncIterator<Link>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  postedBy: <T = UserSubscription>() => T;
  votes: <T = Promise<AsyncIterator<VoteSubscription>>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface LinkNullablePromise
  extends Promise<Link | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  url: () => Promise<String>;
  postedBy: <T = UserPromise>() => T;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Cost {
  id: ID_Output;
  labour?: Int;
  overhead?: Int;
  meterial?: Int;
  capital?: Int;
  subcontracting?: Int;
  travel?: Int;
  other?: Int;
  total?: Int;
}

export interface CostPromise extends Promise<Cost>, Fragmentable {
  id: () => Promise<ID_Output>;
  labour: () => Promise<Int>;
  overhead: () => Promise<Int>;
  meterial: () => Promise<Int>;
  capital: () => Promise<Int>;
  subcontracting: () => Promise<Int>;
  travel: () => Promise<Int>;
  other: () => Promise<Int>;
  total: () => Promise<Int>;
}

export interface CostSubscription
  extends Promise<AsyncIterator<Cost>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  labour: () => Promise<AsyncIterator<Int>>;
  overhead: () => Promise<AsyncIterator<Int>>;
  meterial: () => Promise<AsyncIterator<Int>>;
  capital: () => Promise<AsyncIterator<Int>>;
  subcontracting: () => Promise<AsyncIterator<Int>>;
  travel: () => Promise<AsyncIterator<Int>>;
  other: () => Promise<AsyncIterator<Int>>;
  total: () => Promise<AsyncIterator<Int>>;
}

export interface CostNullablePromise
  extends Promise<Cost | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  labour: () => Promise<Int>;
  overhead: () => Promise<Int>;
  meterial: () => Promise<Int>;
  capital: () => Promise<Int>;
  subcontracting: () => Promise<Int>;
  travel: () => Promise<Int>;
  other: () => Promise<Int>;
  total: () => Promise<Int>;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface LocationSubscriptionPayload {
  mutation: MutationType;
  node: Location;
  updatedFields: String[];
  previousValues: LocationPreviousValues;
}

export interface LocationSubscriptionPayloadPromise
  extends Promise<LocationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LocationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LocationPreviousValuesPromise>() => T;
}

export interface LocationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LocationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LocationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LocationPreviousValuesSubscription>() => T;
}

export interface AggregateFinances {
  count: Int;
}

export interface AggregateFinancesPromise
  extends Promise<AggregateFinances>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFinancesSubscription
  extends Promise<AsyncIterator<AggregateFinances>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LocationPreviousValues {
  id: ID_Output;
  postcode: String;
}

export interface LocationPreviousValuesPromise
  extends Promise<LocationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  postcode: () => Promise<String>;
}

export interface LocationPreviousValuesSubscription
  extends Promise<AsyncIterator<LocationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  postcode: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDetails {
  count: Int;
}

export interface AggregateDetailsPromise
  extends Promise<AggregateDetails>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDetailsSubscription
  extends Promise<AsyncIterator<AggregateDetails>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Organisation {
  id: ID_Output;
  name: String;
  type: String;
}

export interface OrganisationPromise
  extends Promise<Organisation>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  type: () => Promise<String>;
}

export interface OrganisationSubscription
  extends Promise<AsyncIterator<Organisation>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
}

export interface OrganisationNullablePromise
  extends Promise<Organisation | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  type: () => Promise<String>;
}

export interface Details {
  id: ID_Output;
  title: String;
  estimate: DateTimeOutput;
  duration: Int;
  resubmission: Boolean;
}

export interface DetailsPromise extends Promise<Details>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  estimate: () => Promise<DateTimeOutput>;
  duration: () => Promise<Int>;
  resubmission: () => Promise<Boolean>;
}

export interface DetailsSubscription
  extends Promise<AsyncIterator<Details>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  estimate: () => Promise<AsyncIterator<DateTimeOutput>>;
  duration: () => Promise<AsyncIterator<Int>>;
  resubmission: () => Promise<AsyncIterator<Boolean>>;
}

export interface DetailsNullablePromise
  extends Promise<Details | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  estimate: () => Promise<DateTimeOutput>;
  duration: () => Promise<Int>;
  resubmission: () => Promise<Boolean>;
}

export interface OrganisationSubscriptionPayload {
  mutation: MutationType;
  node: Organisation;
  updatedFields: String[];
  previousValues: OrganisationPreviousValues;
}

export interface OrganisationSubscriptionPayloadPromise
  extends Promise<OrganisationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrganisationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrganisationPreviousValuesPromise>() => T;
}

export interface OrganisationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrganisationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrganisationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrganisationPreviousValuesSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrganisationPreviousValues {
  id: ID_Output;
  name: String;
  type: String;
}

export interface OrganisationPreviousValuesPromise
  extends Promise<OrganisationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  type: () => Promise<String>;
}

export interface OrganisationPreviousValuesSubscription
  extends Promise<AsyncIterator<OrganisationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
}

export interface QuestionEdge {
  node: Question;
  cursor: String;
}

export interface QuestionEdgePromise
  extends Promise<QuestionEdge>,
    Fragmentable {
  node: <T = QuestionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface QuestionEdgeSubscription
  extends Promise<AsyncIterator<QuestionEdge>>,
    Fragmentable {
  node: <T = QuestionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Team {
  id: ID_Output;
}

export interface TeamPromise extends Promise<Team>, Fragmentable {
  id: () => Promise<ID_Output>;
  applicant: <T = UserPromise>() => T;
  organisation: <T = FragmentableArray<Organisation>>(args?: {
    where?: OrganisationWhereInput;
    orderBy?: OrganisationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TeamSubscription
  extends Promise<AsyncIterator<Team>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  applicant: <T = UserSubscription>() => T;
  organisation: <T = Promise<AsyncIterator<OrganisationSubscription>>>(args?: {
    where?: OrganisationWhereInput;
    orderBy?: OrganisationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TeamNullablePromise
  extends Promise<Team | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  applicant: <T = UserPromise>() => T;
  organisation: <T = FragmentableArray<Organisation>>(args?: {
    where?: OrganisationWhereInput;
    orderBy?: OrganisationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface LocationEdge {
  node: Location;
  cursor: String;
}

export interface LocationEdgePromise
  extends Promise<LocationEdge>,
    Fragmentable {
  node: <T = LocationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LocationEdgeSubscription
  extends Promise<AsyncIterator<LocationEdge>>,
    Fragmentable {
  node: <T = LocationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface QuestionSubscriptionPayload {
  mutation: MutationType;
  node: Question;
  updatedFields: String[];
  previousValues: QuestionPreviousValues;
}

export interface QuestionSubscriptionPayloadPromise
  extends Promise<QuestionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = QuestionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = QuestionPreviousValuesPromise>() => T;
}

export interface QuestionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<QuestionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = QuestionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = QuestionPreviousValuesSubscription>() => T;
}

export interface FinancesConnection {
  pageInfo: PageInfo;
  edges: FinancesEdge[];
}

export interface FinancesConnectionPromise
  extends Promise<FinancesConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FinancesEdge>>() => T;
  aggregate: <T = AggregateFinancesPromise>() => T;
}

export interface FinancesConnectionSubscription
  extends Promise<AsyncIterator<FinancesConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FinancesEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFinancesSubscription>() => T;
}

export interface CostEdge {
  node: Cost;
  cursor: String;
}

export interface CostEdgePromise extends Promise<CostEdge>, Fragmentable {
  node: <T = CostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CostEdgeSubscription
  extends Promise<AsyncIterator<CostEdge>>,
    Fragmentable {
  node: <T = CostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface TeamPreviousValues {
  id: ID_Output;
}

export interface TeamPreviousValuesPromise
  extends Promise<TeamPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface TeamPreviousValuesSubscription
  extends Promise<AsyncIterator<TeamPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface TeamSubscriptionPayload {
  mutation: MutationType;
  node: Team;
  updatedFields: String[];
  previousValues: TeamPreviousValues;
}

export interface TeamSubscriptionPayloadPromise
  extends Promise<TeamSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TeamPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TeamPreviousValuesPromise>() => T;
}

export interface TeamSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TeamSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TeamSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TeamPreviousValuesSubscription>() => T;
}

export interface Vote {
  id: ID_Output;
}

export interface VotePromise extends Promise<Vote>, Fragmentable {
  id: () => Promise<ID_Output>;
  link: <T = LinkPromise>() => T;
  user: <T = UserPromise>() => T;
}

export interface VoteSubscription
  extends Promise<AsyncIterator<Vote>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  link: <T = LinkSubscription>() => T;
  user: <T = UserSubscription>() => T;
}

export interface VoteNullablePromise
  extends Promise<Vote | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  link: <T = LinkPromise>() => T;
  user: <T = UserPromise>() => T;
}

export interface QuestionPreviousValues {
  id: ID_Output;
  title: String;
  description: String;
  display: Boolean;
  answer: String;
  complete: Boolean;
}

export interface QuestionPreviousValuesPromise
  extends Promise<QuestionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  display: () => Promise<Boolean>;
  answer: () => Promise<String>;
  complete: () => Promise<Boolean>;
}

export interface QuestionPreviousValuesSubscription
  extends Promise<AsyncIterator<QuestionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  display: () => Promise<AsyncIterator<Boolean>>;
  answer: () => Promise<AsyncIterator<String>>;
  complete: () => Promise<AsyncIterator<Boolean>>;
}

export interface TeamEdge {
  node: Team;
  cursor: String;
}

export interface TeamEdgePromise extends Promise<TeamEdge>, Fragmentable {
  node: <T = TeamPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TeamEdgeSubscription
  extends Promise<AsyncIterator<TeamEdge>>,
    Fragmentable {
  node: <T = TeamSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface DetailsConnection {
  pageInfo: PageInfo;
  edges: DetailsEdge[];
}

export interface DetailsConnectionPromise
  extends Promise<DetailsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DetailsEdge>>() => T;
  aggregate: <T = AggregateDetailsPromise>() => T;
}

export interface DetailsConnectionSubscription
  extends Promise<AsyncIterator<DetailsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DetailsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDetailsSubscription>() => T;
}

export interface LinkEdge {
  node: Link;
  cursor: String;
}

export interface LinkEdgePromise extends Promise<LinkEdge>, Fragmentable {
  node: <T = LinkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LinkEdgeSubscription
  extends Promise<AsyncIterator<LinkEdge>>,
    Fragmentable {
  node: <T = LinkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface OrganisationConnection {
  pageInfo: PageInfo;
  edges: OrganisationEdge[];
}

export interface OrganisationConnectionPromise
  extends Promise<OrganisationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrganisationEdge>>() => T;
  aggregate: <T = AggregateOrganisationPromise>() => T;
}

export interface OrganisationConnectionSubscription
  extends Promise<AsyncIterator<OrganisationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrganisationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrganisationSubscription>() => T;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Link",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Vote",
    embedded: false
  },
  {
    name: "Organisation",
    embedded: false
  },
  {
    name: "Competition",
    embedded: false
  },
  {
    name: "Question",
    embedded: false
  },
  {
    name: "Application",
    embedded: false
  },
  {
    name: "Details",
    embedded: false
  },
  {
    name: "Team",
    embedded: false
  },
  {
    name: "Finances",
    embedded: false
  },
  {
    name: "Cost",
    embedded: false
  },
  {
    name: "Location",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
