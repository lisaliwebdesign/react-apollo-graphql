scalar DateTime

type Query {
  info: String!
  feed(filter: String, skip: Int, first: Int, orderBy: LinkOrderByInput): Feed!
  organisations(filter: String): Organisations!
  competitions(filter: String): Competitions!
  questions(filter: String): Questions!
}

type Mutation {
  post(url: String!, description: String!): Link!
  createOrganisation(name: String!, type: String!): Organisation!
  createCompetition(description: String!,  title: String!, fundingType: String!, projectSize: String!, openTime : String!, closeTime: String!, open: Boolean = true): Competition!
  createQuestion(title: String!, description: String!, display: Boolean = true, answer: String = "", complete: Boolean = false): Question!
  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  vote(linkId: ID!): Vote!
  createApplication(competitionId: ID!): Application!
}

enum LinkOrderByInput {
  description_ASC
  description_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
}

type Feed {
  links: [Link!]!
  count: Int!
}

type Subscription {
  newLink: Link
  newVote: Vote
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  links: [Link!]!
}

type Link {
  id: ID!
  createdAt: DateTime!
  description: String!
  url: String!
  postedBy: User
  votes: [Vote!]!
}

type Vote {
  id: ID!
  link: Link!
  user: User!
}

enum ProjectStatus{
  IN_PROGRESS
  SUBMITTED
  NOT_SUBMITTED
  SUCCESS
}

enum OrganisationType{
  BUSINESS
  RESEARCH
  RTO
  NOT_FOR_PROFIT
}

type Organisation{
  id: ID!
  name: String!
  type: String!
}

type Organisations {
  organisations: [Organisation!]!
  count: Int!
}

type Competition{
  id: ID!
  createdAt: DateTime!
  description: String!
  title: String!
  fundingType: String!
  projectSize: String!
  openTime : DateTime!
  closeTime: DateTime!
  open: Boolean!
}

type Competitions{
  competitions: [Competition!]!
  count: Int!
}

type Application {
  id: ID!
  questions: [Question!]!
  user: User!
  competition: Competition!
}

type Question {
  id: ID!
  title: String!
  description: String!
  display: Boolean!
  answer: String!
  complete: Boolean!
}

type Questions {
  count: Int!
  questions:[Question!]!
}



